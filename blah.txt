package handlers

import (
	"context"
	"fmt"
	"net/http"
	"os"

	"github.com/openai/openai-go"
	"github.com/openai/openai-go/option"
)

func TemplateHandler(w http.ResponseWriter, r *http.Request) {

	// init the client with baseURL and api key
	client := openai.NewClient(
		option.WithBaseURL("https://openrouter.ai/api/v1"),
		option.WithAPIKey(os.Getenv("OPEN_API_KEY")),
	)

	// make the call with empty context
	// chatCompletion, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{
	// 	Messages: openai.F([]openai.ChatCompletionMessageParamUnion{
	// 		openai.UserMessage("What is 2+2?"),
	// 	}),
	// 	Model: openai.F("deepseek/deepseek-r1:free"),
	// })

	// Define the chat completion request
	chatParams := &openai.ChatCompletionNewParams{
		Model: openai.F("meta-llama/llama-3.1-8b-instruct:free"), // Example OpenRouter model
		Messages: openai.F([]openai.ChatCompletionMessageParamUnion{
			openai.UserMessage("what is 2+3"),
		}),
	}
	chatCompletion, err := client.Chat.Completions.New(context.TODO(), *chatParams)
	if err != nil {
		fmt.Printf("Error: %v\n", err.Error())
		return
	}

	// Print the response
	if len(chatCompletion.Choices) > 0 {
		fmt.Println(chatCompletion.Choices[0].Message.Content)
	}

	res := chatCompletion.Choices[0].Message.Content
	println(res)

	// w.WriteHeader(http.StatusOK)
	// w.Header().Set("Content-Type", "application/json")
	// w.Write([]byte(`{"message": "This is a  project"}`))
}

// func TemplateHandler(w http.ResponseWriter, r *http.Request) {
// 	client := openai.NewClient(os.Getenv("OPENAI_API_KEY"))
// 	resp, err := client.CreateChatCompletion(
// 		context.Background(),
// 		openai.ChatCompletionRequest{
// 			Model: "deepseek/deepseek-r1:free",
// 			Messages: []openai.ChatCompletionMessage{
// 				{
// 					Role:    openai.ChatMessageRoleUser,
// 					Content: "Hello!",
// 				},
// 			},
// 		},
// 	)

// 	if err != nil {
// 		fmt.Printf("ChatCompletion error: %v\n", err)
// 		return
// 	}

// 	fmt.Println(resp.Choices[0].Message.Content)

// 	w.WriteHeader(http.StatusOK)
// 	w.Header().Set("Content-Type", "application/json")
// 	w.Write([]byte(`{"message": "This is a  project"}`))
// }














---------------------------------------------------------------------------


// // Item represents the data structure for our API
// type Item struct {
// 	ID    string `json:"id"`
// 	Name  string `json:"name"`
// 	Price int    `json:"price"`
// }

// // In-memory store (replace with a database in a real app)
// var items []Item

// // Get all items
// func getItems(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")
// 	json.NewEncoder(w).Encode(items)
// }

// // Get a single item by ID
// func getItem(w http.ResponseWriter, r *http.Request) {
// 	responseObject := *r
// 	fmt.Println(responseObject)
// 	w.Header().Set("Content-Type", "text")
// 	params := mux.Vars(r) // Get URL parameters
// 	for _, item := range items {
// 		if item.ID == params["id"] {
// 			json.NewEncoder(w).Encode(item)
// 			return
// 		}
// 	}
// 	http.Error(w, "Item not found", http.StatusNotFound)
// }

// // Create a new item
// func createItem(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")
// 	var item Item
// 	err := json.NewDecoder(r.Body).Decode(&item)
// 	if err != nil {
// 		http.Error(w, "Invalid request payload", http.StatusBadRequest)
// 		return
// 	}
// 	items = append(items, item)
// 	json.NewEncoder(w).Encode(item)
// }

// // Delete an item by ID
// func deleteItem(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")
// 	params := mux.Vars(r)
// 	for i, item := range items {
// 		if item.ID == params["id"] {
// 			items = append(items[:i], items[i+1:]...)
// 			w.Write([]byte(`{"message": "Item deleted"}`))
// 			return
// 		}
// 	}
// 	http.Error(w, "Item not found", http.StatusNotFound)
// }

// // Main function to set up routes and start server
// func main() {
// 	// Initialize some sample data
// 	items = append(items, Item{ID: "1", Name: "Apple", Price: 100})

// 	// Set up router
// 	router := mux.NewRouter()

// 	// Define endpoints
// 	router.HandleFunc("/items", getItems).Methods("GET")
// 	router.HandleFunc("/items/{id}", getItem).Methods("GET")
// 	router.HandleFunc("/items", createItem).Methods("POST")
// 	router.HandleFunc("/items/{id}", deleteItem).Methods("DELETE")

// 	// Start server
// 	log.Println("Server starting on port 8080...")
// 	log.Fatal(http.ListenAndServe(":8080", router))
// }
